{"version":3,"file":"static/js/880.e46360c7.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../../../node_modules/@solana/web3.js/node_modules/buffer/index.js","../../../node_modules/base-x/src/index.js","../../../node_modules/bigint-buffer/dist/browser.js","../../../node_modules/borsh/lib/index.js","../../../node_modules/bs58/index.js","../../../node_modules/eventemitter3/index.js","../../../node_modules/jayson/lib/client/browser/index.js","../../../node_modules/jayson/lib/generateRequest.js","../../../node_modules/rpc-websockets/dist/index.browser.js","../../../node_modules/rpc-websockets/dist/lib/client.js","../../../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../../../node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/uuid/dist/esm-browser/regex.js","../../../node_modules/uuid/dist/esm-browser/validate.js","../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/uuid/dist/esm-browser/v4.js","../../../node_modules/@noble/hashes/esm/_assert.js","../../../node_modules/@noble/hashes/esm/utils.js","../../../node_modules/@noble/hashes/esm/cryptoBrowser.js","../../../node_modules/@noble/hashes/esm/_sha2.js","../../../node_modules/@noble/hashes/esm/_u64.js","../../../node_modules/@noble/hashes/esm/sha512.js","../../../node_modules/@noble/ed25519/lib/esm/index.js","../../../node_modules/@noble/hashes/esm/sha256.js","../../../node_modules/superstruct/src/error.ts","../../../node_modules/superstruct/src/utils.ts","../../../node_modules/superstruct/src/struct.ts","../../../node_modules/superstruct/src/structs/utilities.ts","../../../node_modules/superstruct/src/structs/types.ts","../../../node_modules/superstruct/src/structs/coercions.ts","../../../node_modules/@noble/hashes/esm/sha3.js","../../../node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/@solana/web3.js/node_modules/@noble/secp256k1/lib/esm/index.js","../../../node_modules/@solana/web3.js/src/utils/ed25519.ts","../../../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../../../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../../../node_modules/@solana/web3.js/src/publickey.ts","../../../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../../../node_modules/@solana/web3.js/src/transaction/constants.ts","../../../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../../../node_modules/@solana/web3.js/src/message/account-keys.ts","../../../node_modules/@solana/web3.js/src/layout.ts","../../../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../../../node_modules/@solana/web3.js/src/utils/assert.ts","../../../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../../../node_modules/@solana/web3.js/src/message/legacy.ts","../../../node_modules/@solana/web3.js/src/message/v0.ts","../../../node_modules/@solana/web3.js/src/transaction/legacy.ts","../../../node_modules/@solana/web3.js/src/sysvar.ts","../../../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../../../node_modules/@solana/web3.js/src/utils/sleep.ts","../../../node_modules/@solana/web3.js/src/instruction.ts","../../../node_modules/@solana/web3.js/src/fee-calculator.ts","../../../node_modules/@solana/web3.js/src/nonce-account.ts","../../../node_modules/@solana/web3.js/src/utils/bigint.ts","../../../node_modules/@solana/web3.js/src/programs/system.ts","../../../node_modules/@solana/web3.js/src/loader.ts","../../../node_modules/@solana/web3.js/src/bpf-loader.ts","../../../node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../../../node_modules/@solana/web3.js/src/epoch-schedule.ts","../../../node_modules/@solana/web3.js/src/errors.ts","../../../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../../../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../../../node_modules/@solana/web3.js/src/account-data.ts","../../../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../../../node_modules/@solana/web3.js/src/connection.ts","../../../node_modules/@solana/web3.js/src/keypair.ts","../../../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../../../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../../../node_modules/@solana/web3.js/src/programs/ed25519.ts","../../../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../../../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../../../node_modules/@solana/web3.js/src/programs/stake.ts","../../../node_modules/@solana/web3.js/src/programs/vote.ts","../../../node_modules/@solana/web3.js/src/validator-info.ts","../../../node_modules/@solana/web3.js/src/vote-account.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../../packages/utility-engine-widget/node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../../../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../../../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../../../node_modules/@babel/runtime/helpers/classCallCheck.js","../../../node_modules/@babel/runtime/helpers/createClass.js","../../../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../../../node_modules/@babel/runtime/helpers/inherits.js","../../../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../../../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../../../node_modules/@babel/runtime/helpers/toPrimitive.js","../../../node_modules/@babel/runtime/helpers/toPropertyKey.js","../../../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","base64","require","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","buf","setPrototypeOf","arg","encodingOrOffset","allocUnsafe","string","encoding","isEncoding","byteLength","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","len","checked","numberIsNaN","type","data","fromObject","toPrimitive","assertSize","size","array","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","end","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","c","hi","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","limit","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","code","errors","E","sym","getMessage","Base","super","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","reverse","hex","num","width","padStart","__createBinding","o","k","k2","__setModuleDefault","__decorate","decorators","key","desc","d","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","item","kind","forEach","serializeStruct","borshSerialize","structSchema","map","field","deserializeField","reader","Map","deserializeStruct","classType","borshDeserialize","Writer","Reader","basex","has","prefix","Events","EE","context","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","emit","a1","a2","a3","a4","a5","removeListener","on","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","request","method","params","id","callback","self","isBatch","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","isNotError","filter","jsonrpc","_interopRequireDefault","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","Client","_CommonClient","_super","address","_ref","_ref$autoconnect","autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","max_reconnects","generate_request_id","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","s","t","p","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","_this2","Promise","resolve","reject","send","promise","setTimeout","_login","mark","_callee","resp","wrap","_context","prev","next","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","close","_this4","addEventListener","notification","keys","then","clearTimeout","_ref2","reason","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","byteToHex","validate","rnds","random","number","isSafeInteger","lengths","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","createView","DataView","rotr","Uint32Array","toBytes","TextEncoder","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","update","digest","tmp","SHA2","padOffset","isLE","view","take","process","dataView","roundClean","digestInto","setBigUint64","_32n","_u32_max","wh","wl","h","setUint32","oview","outLen","state","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_0n","_1n","_2n","CU_O","CURVE","freeze","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","z","static","Point","ZERO","points","toInv","nums","inverted","invert","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","base","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","ax","ay","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","assertRstPoint","RistrettoPoint","ep","r0","Ns","isValid","Ns_D_is_sq","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_y","toHex","bytesToHex","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","fromHex","u8","concatBytes","arrays","every","pad","hexes","uint8a","hexToBytes","hexByte","byte","isNaN","numberTo32BytesBE","MAX_255B","modulo","q","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","pointBytes","_sha512Sync","sha512s","async","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","finishVerification","kA","sync","getPublicKey","sign","R","verify","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","SHA224","sha256","StructError","failure","failures","rest","path","isObject","print","shiftIterator","done","toFailure","struct","branch","refinement","toFailures","iterator","run","coerce","ctx","coercer","valid","validator","entries","ts","Set","refiner","Struct","props","is","tuples","tuple","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","Structs","S","unknown","condition","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","getPrototypeOf","hmac","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","scratch","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1neg","k1","k2neg","splitScalarEndo","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","truncateHash","normalizeSignature","numTo32bStr","rinv","Q","multiplyAndAddUnsafe","isCompressed","toHexX","toRawX","left","aP","bQ","sliceDER","parseDERInt","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","numTo32b","divNearest","ENDO","POW_2_128","c1","c2","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","counter","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","generateSync","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","SOLANA_SCHEMA","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toArrayLike","zeroPad","_Symbol$toStringTag","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","nonce","seedsWithNonce","findProgramAddressSync","pubkeyData","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","isArrayProp","propVal","toStr","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","pick","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","configWithoutEncoding","strategy","rawSignature","decodedSignature","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","_signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","startSlot","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","unsafeRes","transactionDetails","extra","block","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","clientSubscriptionId","_this$_subscriptionSt","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","lockup","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","_ref3","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_inherits","_classCallCheck","chainConfig","chainNamespace","CHAIN_NAMESPACES","_createClass","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_context5","_context6","display","sigData","_req$params","_req$params2","_context7","_context8","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","_yield$injectedProvid4","conn","allTxns","unsignedTx","_yield$injectedProvid5","_data$signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","configure","_objectSpread","setupProvider","_getProviderHandlers","keyPairGenerator","_context9","keyPair","signedMsg","nacl","_providerEngineProxy","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","ReferenceError","asyncGeneratorStep","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_setPrototypeOf","hint","prim","inRange","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}